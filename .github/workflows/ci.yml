name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dotnet-version: ['8.0.x']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ matrix.dotnet-version }}

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore

    - name: Code formatting check
      run: ./scripts/lint

    - name: Build
      run: ./scripts/build

    - name: Run unit tests with coverage
      run: |
        dotnet test tests/MSP430.Emulator.Tests/MSP430.Emulator.Tests.csproj \
          --configuration Release \
          --no-build \
          --verbosity normal \
          --collect:"XPlat Code Coverage" \
          --results-directory TestResults/Unit

    - name: Run integration tests with coverage
      run: |
        dotnet test tests/MSP430.Emulator.IntegrationTests/MSP430.Emulator.IntegrationTests.csproj \
          --configuration Release \
          --no-build \
          --verbosity normal \
          --collect:"XPlat Code Coverage" \
          --results-directory TestResults/Integration

    - name: Generate coverage report
      run: |
        dotnet tool install -g dotnet-reportgenerator-globaltool
        reportgenerator \
          -reports:"TestResults/**/coverage.cobertura.xml" \
          -targetdir:"TestResults/CoverageReport" \
          -reporttypes:"HtmlInline_AzurePipelines;Cobertura;JsonSummary"

    - name: Check coverage threshold
      run: |
        if [ ! -f "TestResults/CoverageReport/Summary.json" ]; then
          echo "No coverage report found. Skipping coverage check."
          exit 0
        fi
        COVERAGE=$(cat TestResults/CoverageReport/Summary.json | grep -o '"linecoverage": [0-9.]*' | grep -o '[0-9.]*')
        if [ -z "$COVERAGE" ] || [ "$COVERAGE" = "null" ]; then
          echo "No coverage data available. Skipping coverage check."
          exit 0
        fi
        echo "Line coverage: $COVERAGE%"
        if (( $(echo "$COVERAGE < 80" | bc -l) )); then
          echo "Coverage $COVERAGE% is below minimum threshold of 80%"
          exit 1
        fi
        echo "Coverage $COVERAGE% meets minimum threshold of 80%"

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        directory: TestResults
        files: "*/coverage.cobertura.xml"
        fail_ci_if_error: false
        verbose: true

    - name: Upload coverage to GitHub
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: TestResults/CoverageReport
        retention-days: 30

  quality-gates:
    runs-on: ubuntu-latest
    needs: [build-and-test, automation-scripts]
    if: always()

    steps:
    - name: Check build status
      run: |
        if [ "${{ needs.build-and-test.result }}" != "success" ]; then
          echo "Build and test job failed"
          exit 1
        fi
        if [ "${{ needs.automation-scripts.result }}" != "success" ]; then
          echo "Automation scripts job failed"
          exit 1
        fi
        echo "All quality gates passed"

  automation-scripts:
    runs-on: ubuntu-latest
    name: Automation Scripts CI

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: '.github/scripts/package*.json'

    - name: Install dependencies
      run: |
        cd .github/scripts
        npm install

    - name: Lint automation scripts
      run: |
        cd .github/scripts
        echo "Installing ESLint..."
        npm install
        echo "Running ESLint..."
        npm run lint

    - name: Validate YAML files
      run: |
        cd .github/scripts
        echo "Running YAML linting..."
        npm run lint:yaml

    - name: Validate GitHub Actions workflows
      run: |
        cd .github/scripts
        echo "Validating GitHub Actions workflows..."
        npm run validate:workflows

    - name: Validate package.json
      run: |
        cd .github/scripts
        npm audit --audit-level=high
        npm outdated || true  # Don't fail on outdated packages, just report

    - name: Test task parsing
      run: |
        cd .github/scripts
        echo "Testing task parsing functionality..."
        node parse-tasks.js ../../MSP430_EMULATOR_TASKS.md > /tmp/parse-test.json
        if [ $? -eq 0 ]; then
          echo "✅ Parse test passed"
          # Validate JSON output
          jq empty /tmp/parse-test.json
          echo "✅ Generated valid JSON"
        else
          echo "❌ Parse test failed"
          exit 1
        fi

    - name: Test dry-run functionality
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd .github/scripts
        echo "Testing dry-run functionality..."
        timeout 30s node dry-run.js ../../MSP430_EMULATOR_TASKS.md > /tmp/dry-run-test.txt
        if [ $? -eq 0 ]; then
          echo "✅ Dry-run test passed"
        else
          echo "❌ Dry-run test failed or timed out"
          exit 1
        fi

    - name: Upload test artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: automation-test-results
        path: |
          /tmp/parse-test.json
          /tmp/dry-run-test.txt
        retention-days: 7
