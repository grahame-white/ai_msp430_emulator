name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dotnet-version: ['8.0.x']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ matrix.dotnet-version }}

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/*.sln') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore

    - name: Code formatting check
      run: ./scripts/lint

    - name: Build
      run: ./scripts/build

    - name: Run unit tests with coverage
      run: |
        dotnet test tests/MSP430.Emulator.Tests/MSP430.Emulator.Tests.csproj \
          --configuration Release \
          --no-build \
          --verbosity normal \
          --collect:"XPlat Code Coverage" \
          --results-directory TestResults/Unit || exit 1

    - name: Run integration tests with coverage
      run: |
        dotnet test tests/MSP430.Emulator.IntegrationTests/MSP430.Emulator.IntegrationTests.csproj \
          --configuration Release \
          --no-build \
          --verbosity normal \
          --collect:"XPlat Code Coverage" \
          --results-directory TestResults/Integration || exit 1

    - name: Generate coverage report
      run: |
        dotnet tool install -g dotnet-reportgenerator-globaltool
        echo "Searching for coverage files..."
        find TestResults -name "*.xml" -type f
        reportgenerator \
          -reports:"TestResults/**/coverage.cobertura.xml" \
          -targetdir:"TestResults/CoverageReport" \
          -reporttypes:"HtmlInline_AzurePipelines;Cobertura;JsonSummary" || exit 1

    - name: Check coverage threshold
      run: |
        if [ ! -f "TestResults/CoverageReport/Summary.json" ]; then
          echo "No coverage report found. Skipping coverage check."
          exit 0
        fi
        echo "Coverage report found, extracting coverage data..."
        cat TestResults/CoverageReport/Summary.json | head -20
        COVERAGE=$(cat TestResults/CoverageReport/Summary.json | grep -o '"linecoverage": [0-9.]*' | grep -o '[0-9.]*')
        if [ -z "$COVERAGE" ] || [ "$COVERAGE" = "null" ]; then
          echo "No coverage data available. Skipping coverage check."
          exit 0
        fi
        echo "Line coverage: $COVERAGE%"
        # Use awk for floating point comparison instead of bc
        if awk "BEGIN {exit !($COVERAGE < 80)}"; then
          echo "Coverage $COVERAGE% is below minimum threshold of 80%"
          exit 1
        fi
        echo "Coverage $COVERAGE% meets minimum threshold of 80%"

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        directory: TestResults
        files: "*/coverage.cobertura.xml"
        fail_ci_if_error: false
        verbose: true

    - name: Upload coverage to GitHub
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: TestResults/CoverageReport
        retention-days: 30

  quality-gates:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: always()

    steps:
    - name: Check build status
      run: |
        if [[ "${{ needs.build-and-test.result }}" != "success" ]]; then
          echo "Build and test job failed"
          exit 1
        fi
        echo "All quality gates passed"