name: Security Scanning

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

permissions:
  actions: read
  contents: read
  security-events: write

jobs:
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 360
    strategy:
      fail-fast: false
      matrix:
        language: [ 'csharp' ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        queries: security-extended,security-and-quality

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Restore dependencies
      run: dotnet restore

    - name: Build for analysis
      run: dotnet build --configuration Release --no-restore

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Restore dependencies
      run: dotnet restore

    - name: Check for vulnerable packages
      run: |
        dotnet list package --vulnerable --include-transitive > vulnerability-report.txt 2>&1
        echo "Vulnerability scan results:"
        cat vulnerability-report.txt
        
        if grep -q "has the following vulnerable packages" vulnerability-report.txt; then
          echo "Vulnerable packages detected - analyzing..."
          
          # Extract all vulnerability lines that start with "> "
          grep "^   > " vulnerability-report.txt > vulnerabilities.txt || true
          
          # Count total vulnerabilities
          TOTAL_VULNS=$(wc -l < vulnerabilities.txt || echo "0")
          echo "Total vulnerabilities found: $TOTAL_VULNS"
          
          if [ "$TOTAL_VULNS" -eq 0 ]; then
            echo "No vulnerability details found despite header detection"
            exit 0
          fi
          
          # Count known false positives by filtering them out
          grep -v "System.Net.Http.*4.3.0" vulnerabilities.txt | grep -v "System.Text.RegularExpressions.*4.3.0" > real-vulnerabilities.txt || true
          REAL_VULNS=$(wc -l < real-vulnerabilities.txt || echo "0")
          
          echo "Real vulnerabilities (excluding known false positives): $REAL_VULNS"
          
          if [ "$REAL_VULNS" -eq 0 ]; then
            echo "Only known false positive vulnerabilities found - these are resolved by .NET 8 runtime"
            exit 0
          else
            echo "Found $REAL_VULNS genuine security vulnerabilities:"
            cat real-vulnerabilities.txt
            echo "Failing build due to security vulnerabilities"
            exit 1
          fi
        else
          echo "No vulnerable packages found"
        fi

    - name: Upload vulnerability report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: vulnerability-report
        path: vulnerability-report.txt
        retention-days: 30

  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run Trivy secret scanner
      uses: aquasecurity/trivy-action@0.28.0
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        scanners: 'secret'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  license-check:
    name: License Compliance Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Install license check tool
      run: dotnet tool install --global dotnet-project-licenses

    - name: Restore dependencies
      run: dotnet restore

    - name: Check licenses
      run: |
        dotnet-project-licenses -i . -o licenses.json -f json
        echo "License information generated in licenses.json"

    - name: Upload license report
      uses: actions/upload-artifact@v4
      with:
        name: license-report
        path: licenses.json
        retention-days: 30