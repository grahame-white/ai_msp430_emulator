@startuml status_register_bits
!theme plain
title MSP430 Status Register (SR/R2) Bit Layout

scale 1000 width

' Status Register bit layout
rectangle "Status Register (R2/SR) - 16 bits" as SR {
    
    ' Bit layout from 15 down to 0
    rectangle "15" as B15 #lightgray
    rectangle "14" as B14 #lightgray
    rectangle "13" as B13 #lightgray
    rectangle "12" as B12 #lightgray
    rectangle "11" as B11 #lightgray
    rectangle "10" as B10 #lightgray
    rectangle "9" as B9 #lightgray
    rectangle "8\nV" as B8 #lightcoral
    rectangle "7\nSCG1" as B7 #lightyellow
    rectangle "6\nSCG0" as B6 #lightyellow
    rectangle "5\nOSCOFF" as B5 #lightblue
    rectangle "4\nCPUOFF" as B4 #lightblue
    rectangle "3\nGIE" as B3 #lightgreen
    rectangle "2\nN" as B2 #lightpink
    rectangle "1\nZ" as B1 #lightpink
    rectangle "0\nC" as B0 #lightpink
    
    B15 -right-> B14
    B14 -right-> B13
    B13 -right-> B12
    B12 -right-> B11
    B11 -right-> B10
    B10 -right-> B9
    B9 -right-> B8
    B8 -right-> B7
    B7 -right-> B6
    B6 -right-> B5
    B5 -right-> B4
    B4 -right-> B3
    B3 -right-> B2
    B2 -right-> B1
    B1 -right-> B0
}

' Flag descriptions
rectangle "Flag Descriptions" as FLAGS {
    
    rectangle "Condition Code Flags" as CC {
        rectangle "C (Bit 0): Carry Flag\nSet on arithmetic carry/borrow" as CFLAG #lightpink
        rectangle "Z (Bit 1): Zero Flag\nSet when result equals zero" as ZFLAG #lightpink
        rectangle "N (Bit 2): Negative Flag\nSet when result is negative" as NFLAG #lightpink
        rectangle "V (Bit 8): Overflow Flag\nSet on signed arithmetic overflow" as VFLAG #lightcoral
    }
    
    rectangle "System Control Flags" as SYS {
        rectangle "GIE (Bit 3): Global Interrupt Enable\nEnables maskable interrupts" as GIEFLAG #lightgreen
        rectangle "CPUOFF (Bit 4): CPU Off\nTurns off CPU (LPM0+)" as CPUOFFFLAG #lightblue
        rectangle "OSCOFF (Bit 5): Oscillator Off\nTurns off LFXT1 oscillator" as OSCOFFFLAG #lightblue
        rectangle "SCG0 (Bit 6): System Clock Generator 0\nTurns off SMCLK" as SCG0FLAG #lightyellow
        rectangle "SCG1 (Bit 7): System Clock Generator 1\nTurns off DCO" as SCG1FLAG #lightyellow
    }
    
    rectangle "Reserved Bits" as RES {
        rectangle "Bits 9-15: Reserved\nShould be written as 0\nRead as undefined" as RESERVED #lightgray
    }
}

' Flag operations
rectangle "Common Flag Operations" as OPS {
    rectangle "Arithmetic Result Flags\nC, Z, N, V updated by ALU" as ARITH #lightsteelblue
    rectangle "Interrupt Control\nGIE controls interrupt processing" as INT #lightsteelblue
    rectangle "Low Power Mode Control\nCPUOFF, OSCOFF, SCG0, SCG1" as LPM #lightsteelblue
}

' Color legend  
legend bottom
    |Color |Flag Category |Usage |
    |<#lightpink>| Condition Codes | Updated by arithmetic/logical operations |
    |<#lightcoral>| Overflow Flag | Updated by signed arithmetic operations |
    |<#lightgreen>| Interrupt Control | Controls interrupt processing |
    |<#lightblue>| Power Management | Controls low power modes |
    |<#lightyellow>| Clock Control | Controls system clocks |
    |<#lightgray>| Reserved | Should not be used |
endlegend

note bottom of SR : Status Register provides CPU state information\nand system control functionality

note top of FLAGS : Each bit controls a specific CPU behavior\nor reflects the result of operations

@enduml