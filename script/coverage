#!/usr/bin/env bash
# script/coverage
# Generate and validate test coverage reports

set -e

cd "$(dirname "$0")/.."

echo "==> Generating MSP430 Emulator test coverage..."

# Ensure we have a clean test environment
rm -rf TestResults

# Run tests with coverage collection
echo "==> Running unit tests with coverage..."
dotnet test tests/MSP430.Emulator.Tests/MSP430.Emulator.Tests.csproj \
  --configuration Release \
  --no-build \
  --verbosity normal \
  --collect:"XPlat Code Coverage" \
  --results-directory TestResults/Unit

echo "==> Running integration tests with coverage..."
dotnet test tests/MSP430.Emulator.IntegrationTests/MSP430.Emulator.IntegrationTests.csproj \
  --configuration Release \
  --no-build \
  --verbosity normal \
  --collect:"XPlat Code Coverage" \
  --results-directory TestResults/Integration

# Check if we have coverage files
if ! find TestResults -name "coverage.cobertura.xml" | grep -q .; then
  echo "⚠️  No coverage files found. Coverage reporting may not be available."
  exit 0
fi

# Install coverage reporting tool if not available
if ! command -v reportgenerator >/dev/null 2>&1; then
  echo "==> Installing coverage report generator..."
  dotnet tool install -g dotnet-reportgenerator-globaltool
fi

# Generate consolidated coverage report
echo "==> Generating coverage report..."
reportgenerator \
  -reports:"TestResults/**/coverage.cobertura.xml" \
  -targetdir:"TestResults/CoverageReport" \
  -reporttypes:"HtmlInline_AzurePipelines;Cobertura;JsonSummary"

# Helper function to check coverage threshold
check_coverage_threshold() {
  local coverage_type="$1"
  local coverage_value="$2"
  local threshold="$3"
  local coverage_name="$4"
  
  if [ -n "$coverage_value" ] && [ "$coverage_value" != "null" ] && [ "$coverage_value" != "0" ]; then
    echo "==> $coverage_name coverage: $coverage_value%"
    
    if (( $(echo "$coverage_value < $threshold" | bc -l 2>/dev/null || echo "0") )); then
      echo "❌ $coverage_name coverage $coverage_value% is below minimum threshold of $threshold%"
      return 1
    else
      echo "✅ $coverage_name coverage $coverage_value% meets minimum threshold of $threshold%"
      return 0
    fi
  else
    echo "⚠️  No $coverage_type coverage data available in summary."
    return 1
  fi
}

# Check coverage thresholds
if [ -f "TestResults/CoverageReport/Summary.json" ]; then
  LINE_COVERAGE=$(grep -o '"linecoverage": [0-9.]*' TestResults/CoverageReport/Summary.json | head -1 | grep -o '[0-9.]*' || echo "0")
  BRANCH_COVERAGE=$(grep -o '"branchcoverage": [0-9.]*' TestResults/CoverageReport/Summary.json | head -1 | grep -o '[0-9.]*' || echo "0")
  
  # Check line coverage against threshold (default 80%)
  LINE_THRESHOLD=${COVERAGE_THRESHOLD:-80}
  check_coverage_threshold "line" "$LINE_COVERAGE" "$LINE_THRESHOLD" "Line"
  LINE_PASS=$?
  
  # Check branch coverage against threshold (default 70%)
  BRANCH_THRESHOLD=${BRANCH_COVERAGE_THRESHOLD:-70}
  check_coverage_threshold "branch" "$BRANCH_COVERAGE" "$BRANCH_THRESHOLD" "Branch"
  BRANCH_PASS=$?
  
  # Both line and branch coverage must pass (return code 0 means pass)
  if [ $LINE_PASS -ne 0 ] || [ $BRANCH_PASS -ne 0 ]; then
    echo "❌ Coverage validation failed - both line and branch coverage thresholds must be met"
    exit 1
  fi
else
  echo "⚠️  No coverage summary found."
  exit 1
fi

echo "==> Coverage analysis completed successfully!"
echo "    Report available at: TestResults/CoverageReport/index.html"