#!/usr/bin/env bash
# script/security
# Run security scanning and vulnerability checks

set -e

cd "$(dirname "$0")/.."

echo "==> Running MSP430 Emulator security checks..."

# Function to check if a command exists
command_exists() {
  command -v "$1" >/dev/null 2>&1
}

# Function to run .NET dependency vulnerability scan
check_dotnet_vulnerabilities() {
  echo "==> Checking .NET packages for vulnerabilities..."
  
  # Ensure dependencies are restored
  ./script/bootstrap
  
  # Run vulnerability scan
  dotnet list package --vulnerable --include-transitive > vulnerability-report.txt 2>&1 || true
  
  echo "Vulnerability scan results:"
  cat vulnerability-report.txt
  
  if grep -q "has the following vulnerable packages" vulnerability-report.txt; then
    echo "Vulnerable packages found - checking for known false positives..."
    
    # Check if only known .NET 8 false positives are present
    if grep -q "System.Net.Http.*4.3.0" vulnerability-report.txt && grep -q "System.Text.RegularExpressions.*4.3.0" vulnerability-report.txt; then
      # Count total vulnerability lines
      TOTAL_VULNS=$(grep -c "^   > " vulnerability-report.txt || echo "0")
      # Count false positive lines
      FALSE_POSITIVES=$(grep -c "System.Net.Http.*4.3.0\|System.Text.RegularExpressions.*4.3.0" vulnerability-report.txt || echo "0")
      
      if [ "$TOTAL_VULNS" -eq "$FALSE_POSITIVES" ]; then
        echo "✅ Only known .NET 8 false positive vulnerabilities found"
        echo "   These are resolved by the .NET 8 runtime"
        return 0
      fi
    fi
    
    echo "❌ Genuine security vulnerabilities detected"
    return 1
  else
    echo "✅ No vulnerable .NET packages found"
  fi
}

# Function to check Node.js dependencies
check_nodejs_vulnerabilities() {
  if [ ! -d ".github/scripts" ]; then
    echo "==> No Node.js automation scripts found, skipping Node.js security check"
    return 0
  fi
  
  echo "==> Checking Node.js packages for vulnerabilities..."
  
  cd .github/scripts
  
  # Ensure dependencies are installed
  if [ ! -f "package.json" ]; then
    echo "==> No package.json found, skipping Node.js security check"
    cd ../..
    return 0
  fi
  
  npm install >/dev/null 2>&1 || true
  
  # Run npm audit
  echo "Running npm audit for automation scripts..."
  npm audit --json > /tmp/npm-audit.json 2>&1 || true
  
  if [ -f "/tmp/npm-audit.json" ]; then
    echo "npm audit results:"
    cat /tmp/npm-audit.json
    
    # Parse vulnerabilities (check if jq is available)
    if command_exists jq; then
      HIGH_VULNS=$(jq -r '.vulnerabilities | to_entries[] | select(.value.severity == "high" or .value.severity == "critical") | .key' /tmp/npm-audit.json 2>/dev/null | wc -l || echo "0")
      
      if [ "$HIGH_VULNS" -gt 0 ]; then
        echo "❌ Found $HIGH_VULNS high/critical vulnerabilities in Node.js dependencies"
        jq -r '.vulnerabilities | to_entries[] | select(.value.severity == "high" or .value.severity == "critical") | "\(.key): \(.value.severity)"' /tmp/npm-audit.json 2>/dev/null || true
        cd ../..
        return 1
      else
        echo "✅ No high/critical vulnerabilities found in Node.js dependencies"
      fi
    else
      echo "⚠️  jq not available, running basic npm audit check"
      if ! npm audit --audit-level=high >/dev/null 2>&1; then
        echo "❌ High/critical vulnerabilities found in Node.js dependencies"
        npm audit --audit-level=high
        cd ../..
        return 1
      else
        echo "✅ No high/critical vulnerabilities found in Node.js dependencies"
      fi
    fi
  else
    echo "⚠️  npm audit output not available"
  fi
  
  cd ../..
}

# Function to check licenses
check_licenses() {
  echo "==> Checking license compliance..."
  
  # Check .NET licenses
  if command_exists nuget-license; then
    echo "Checking .NET package licenses..."
    if nuget-license -i MSP430.Emulator.sln -o Json -fo licenses.json >/dev/null 2>&1; then
      echo "✅ .NET license information generated"
      nuget-license -i MSP430.Emulator.sln || echo "License display completed"
    else
      echo "⚠️  License scanning tool failed, creating basic report..."
      echo '{"licenses": [], "note": "License tool failed"}' > licenses.json
      find . -name "*.csproj" -exec grep -H "PackageReference" {} \; | head -10 || echo "No package references found"
    fi
  else
    echo "⚠️  nuget-license tool not available, skipping .NET license check"
    echo '{"licenses": [], "note": "License tool not available"}' > licenses.json
  fi
  
  # Check Node.js licenses if applicable
  if [ -d ".github/scripts" ] && [ -f ".github/scripts/package.json" ]; then
    echo "Checking Node.js package licenses..."
    cd .github/scripts
    
    if command_exists license-checker; then
      if license-checker --json --out /tmp/nodejs-licenses.json >/dev/null 2>&1; then
        echo "✅ Node.js license report generated"
        
        # Check for problematic licenses
        if license-checker --failOn 'GPL' --json >/dev/null 2>&1; then
          echo "✅ No restricted licenses found"
        else
          echo "❌ Found GPL or other restricted licenses"
          license-checker --failOn 'GPL'
          cd ../..
          return 1
        fi
      else
        echo "⚠️  License checker failed, creating fallback report"
        echo '{"fallback": "License checker not available"}' > /tmp/nodejs-licenses.json
      fi
    else
      echo "⚠️  license-checker not available, skipping Node.js license check"
    fi
    
    cd ../..
  fi
}

# Main execution
SECURITY_CHECKS_PASSED=0
SECURITY_CHECKS_FAILED=0

# Parse command line arguments
SKIP_DOTNET=false
SKIP_NODEJS=false
SKIP_LICENSES=false

while [[ $# -gt 0 ]]; do
  case $1 in
    --skip-dotnet)
      SKIP_DOTNET=true
      shift
      ;;
    --skip-nodejs)
      SKIP_NODEJS=true
      shift
      ;;
    --skip-licenses)
      SKIP_LICENSES=true
      shift
      ;;
    --help)
      echo "Usage: $0 [options]"
      echo "Options:"
      echo "  --skip-dotnet   Skip .NET vulnerability scanning"
      echo "  --skip-nodejs   Skip Node.js vulnerability scanning"
      echo "  --skip-licenses Skip license compliance checking"
      echo "  --help          Show this help message"
      exit 0
      ;;
    *)
      echo "Unknown option: $1"
      echo "Use --help for usage information"
      exit 1
      ;;
  esac
done

# Run security checks
if [ "$SKIP_DOTNET" = false ]; then
  if check_dotnet_vulnerabilities; then
    ((SECURITY_CHECKS_PASSED++))
  else
    ((SECURITY_CHECKS_FAILED++))
  fi
fi

if [ "$SKIP_NODEJS" = false ]; then
  if check_nodejs_vulnerabilities; then
    ((SECURITY_CHECKS_PASSED++))
  else
    ((SECURITY_CHECKS_FAILED++))
  fi
fi

if [ "$SKIP_LICENSES" = false ]; then
  if check_licenses; then
    ((SECURITY_CHECKS_PASSED++))
  else
    ((SECURITY_CHECKS_FAILED++))
  fi
fi

# Summary
echo ""
echo "==> Security check summary:"
echo "    Passed: $SECURITY_CHECKS_PASSED"
echo "    Failed: $SECURITY_CHECKS_FAILED"

if [ $SECURITY_CHECKS_FAILED -gt 0 ]; then
  echo "❌ Security checks failed"
  exit 1
elif [ $SECURITY_CHECKS_PASSED -eq 0 ] && [ $SECURITY_CHECKS_FAILED -eq 0 ]; then
  echo "⚠️  No security checks were run (all were skipped)"
  echo "✅ Security scan completed (no issues found)"
else
  echo "✅ All security checks passed"
fi