#!/usr/bin/env bash
# script/test-scripts
# Basic smoke tests for script functionality

set -e

cd "$(dirname "$0")/.."

echo "==> Running script smoke tests..."

# Test script/update
echo "==> Testing script/update..."
if timeout 60s ./script/update; then
    echo "✅ script/update completed successfully"
else
    echo "❌ script/update failed or timed out"
    exit 1
fi

# Test script/bootstrap
echo "==> Testing script/bootstrap..."
if timeout 60s ./script/bootstrap; then
    echo "✅ script/bootstrap completed successfully"
else
    echo "❌ script/bootstrap failed or timed out"
    exit 1
fi

# Test script/build (basic validation)
echo "==> Testing script/build..."
if timeout 120s ./script/build; then
    echo "✅ script/build completed successfully"
else
    echo "❌ script/build failed or timed out"
    exit 1
fi

# Test script/cibuild (with fast mode)
echo "==> Testing script/cibuild..."
if timeout 180s ./script/cibuild --fast; then
    echo "✅ script/cibuild completed successfully"
else
    echo "❌ script/cibuild failed or timed out"
    exit 1
fi

# Test script/security (basic validation)
echo "==> Testing script/security..."
if timeout 120s ./script/security --skip-licenses; then
    echo "✅ script/security completed successfully"
else
    echo "❌ script/security failed or timed out"
    exit 1
fi

# Test script/console (dry run validation)
echo "==> Testing script/console..."
if timeout 30s bash -c 'echo "exit()" | ./script/console' 2>/dev/null || echo "Console test skipped (dotnet-script not available)"; then
    echo "✅ script/console completed successfully or skipped gracefully"
else
    echo "❌ script/console failed unexpectedly"
    exit 1
fi

echo "==> All script smoke tests passed!"

# Test CI environment behavior for script/test
echo "==> Testing script/test CI environment behavior..."

# Test that script/test skips update in CI environment
echo "==> Testing script/test skips update when CI=true..."
if CI=true timeout 60s bash -c './script/test --fast 2>&1 | grep -q "Ensuring application is up to date"'; then
    echo "❌ script/test should NOT call update when CI=true"
    exit 1
else
    echo "✅ script/test correctly skips update when CI=true"
fi

# Test that script/test calls update in non-CI environment (development)
echo "==> Testing script/test calls update when CI is not set..."
if timeout 60s bash -c 'unset CI && ./script/test --fast 2>&1 | grep -q "Ensuring application is up to date"'; then
    echo "✅ script/test correctly calls update in development environment"
else
    echo "❌ script/test should call update when CI is not set"
    exit 1
fi

# Test CI environment behavior for script/server
echo "==> Testing script/server CI environment behavior..."

# Test that script/server skips update in CI environment
echo "==> Testing script/server skips update when CI=true..."
if CI=true timeout 30s bash -c './script/server --help 2>&1 | grep -q "Ensuring application is up to date"' 2>/dev/null; then
    echo "❌ script/server should NOT call update when CI=true"
    exit 1
else
    echo "✅ script/server correctly skips update when CI=true"
fi

echo "==> CI environment behavior tests passed!"

# Test annotation functionality
echo "==> Testing annotation functionality..."
if timeout 60s ./script/test-annotations; then
    echo "✅ script/test-annotations completed successfully"
else
    echo "❌ script/test-annotations failed or timed out"
    exit 1
fi

echo "==> All script tests passed!"